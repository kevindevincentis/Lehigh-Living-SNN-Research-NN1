load_file("neuronTemp.hoc")

begintemplate fullLayer
public cellArray, input, inputs, outCells, numNeurons

objectvar cellArray[1], syn[1], inputs[1], inputSyn[1], r, outCells[1]
objectvar outSyn[1]

proc init() {
    numNeurons = $1
    e_inhibit = -80
    e_excite = 0
    nDigits = 10

    objectvar cellArray[numNeurons], outCells[nDigits]
    objectvar syn[numNeurons * nDigits]
    objectvar outSyn[nDigits * nDigits]
    objectvar inputs[numNeurons], inputSyn[numNeurons]

    objref r
    r = new Random()

    for i = 0, numNeurons - 1 {
        cellArray[i] = new procCell()
    }

    for i = 0, nDigits - 1 {
        outCells[i] = new procCell()
    }

    // create excitory connections from input to main layer
    for i = 0, numNeurons - 1 {

        cellArray[i].soma inputSyn[i] = new ExpSyn(0)
        inputSyn[i].e = e_excite
        inputs[i] = new NetStim(1)
        inputs[i].noise = 1
        inputs[i].start = 5
        cellArray[i].nclist.append(new NetCon(inputs[i], inputSyn[i], -20, 1, 1))
    }

    // Create excitory connections from main layer to output layer
    r = new Random()
    for dest = 0, nDigits - 1 {
        w = r.normal(dest/10.0, 0.02)
        for cur = 0, numNeurons-1 {

            w = r.repick()
            while (w <= 0) {w = r.repick()}
            outCells[dest].soma syn[cur*nDigits + dest] = new ExpSyn(0)
            syn[cur*nDigits + dest].e = e_excite
            cellArray[cur].soma outCells[dest].nclist.append(new NetCon(&v(1), syn[cur*nDigits + dest], 25, 1, w))
        }
    }

    // Create inhibitory connections in the output layer
    for cur = 0, nDigits-1 {
        for dest = 0, nDigits-1 {
            if (cur == dest) {continue}
            outCells[dest].soma outSyn[cur*nDigits + dest] = new ExpSyn(0)
            outSyn[cur*nDigits + dest].e = e_inhibit
            outCells[cur].soma outCells[dest].Inclist.append(new NetCon(&v(1), outSyn[cur*dest + dest], -60, 1, 1))
        }
    }

}

proc input() {local i
    for i = 0, numNeurons-1 {
        w = $&1[i]
        inputs[i].interval = (1.0)/(w)
    }
}

endtemplate fullLayer
