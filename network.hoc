load_file("neuronTemp.hoc")

begintemplate fullLayer
public cellArray, input, inputs

objectvar cellArray[1], syn[1], inputs[1], inputSyn[1], r
double    imgLam[1]
e_inhibit = -60
e_excite = 0
numNeurons = 0

proc init() {

    numNeurons = $1

    objectvar cellArray[numNeurons]
    objectvar syn[numNeurons*(numNeurons - 1)]
    objectvar inputs[numNeurons], inputSyn[numNeurons]

    objref r
    r = new Random()

    for i = 0, numNeurons - 1 {
        cellArray[i] = new procCell()
    }

    r.uniform(0, 1) // not as efficient as
    for cur = 0, numNeurons-1 {
        for next = 0, numNeurons-1 {
            if (cur == next) {
                continue
            }
            cellArray[next].soma syn[cur*next + next] = new ExpSyn(0)
            syn[cur*next + next].e = e_inhibit
            cellArray[cur].soma cellArray[next].nclist.append(new NetCon(&v(1), syn[cur*next + next], 0, 1, r.repick()))
        }
    }

    for i = 0, numNeurons - 1 {
        cellArray[i].soma inputSyn[i] = new ExpSyn(0)
        inputSyn[i].e = e_excite
        inputs[i] = new NetStim(1)
        inputs[i].noise = 1
        inputs[i].start = 5
        cellArray[i].nclist.append(new NetCon(inputs[i], inputSyn[i], -20, 1, 0.5))
    }
}

proc input() {
    double imgLam[numNeurons]
    imgLam = $1
    for i = 0, numNeurons - 1 {
        inputs[i].interval = 1.0/(imgLam[i] + 1)
    }
}

endtemplate fullLayer
